#include <stdio.h>
#include <stdlib.h>
#include <time.h>


// Problem 1:   The program fails to put cpu into 1 of two winning positions of user

// Problem 2:	The program has not stored i,j of cpu when cpu_ch is placed into the winning position of user



// global variables

char *pos_user = 0, *pos_cpu = 0; int pointer_user[2] = {0} ; int pointer_cpu[2] = {0};

int counter = 0, counter_user = 0, counter_cpu = 0, user, cpu;

int win_pos_row = -1;	int win_pos_column = -1;

char mat[3][3];

int i, j, ir, jr;

int defense_visited=0;

char cpu_ch, user_ch;  // variables to hold 'X' and 'O' for both the user and the cpu

// functions used

void display(), error_message(), print_dash();
void fill(); int solve(); void game();
void check_if_defend(); void check_if_win();

void before_threshold();

int count = 0;

int checkByColumn(int c, char ch);
int checkByRow(int r, char ch);
int checkByDiagonal(int r, int c, char ch);

int iterations=0;


char* find_win_pos(char a, int row, int column)
{
	
	 printf("in find_win_pos\n");
	 printf("To check if %c has a winning position\n\n",a);
    	
	if( (checkByColumn(column, a) == 2 ) || (checkByRow(row, a) == 2 ) || (checkByDiagonal(row, column, a) == 2 ) )
	{
		if(pos_cpu!=0 && *pos_cpu=='N')
		{
			printf("A winning position for cpu is found\n\n");
			return pos_cpu;
		}
		
		else if(pos_user!=0 && *pos_user=='N')
		{
			printf("A winning position for user is found\n\n");
			return pos_user;
		}
	}
	printf("No winning position is found for either of two players\n");
	return 0; // if no
}


int random(int lower, int upper)
{
	srand (time (NULL));
	int num = (rand() % (upper - lower + 1)) + lower;
	++iterations;
	return num;
}


void fill()
{
	
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			mat[i][j] = 'N';    // N --> Empty
		}
		printf("\n");
	}

}


void error_message()
{
	printf("\nInvalid Input...\n\n");
}

void print_dash(int pos)
{
	printf("\t\t\t\t__ ");
}


void display()
{
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			if(j==0)
				printf("\t\t\t\t%c ",mat[i][j]);
			
			else if(j==1)
				printf("%c ",mat[i][j]);
				
			else if(j==2)
				printf("%c\n",mat[i][j]);
				
			//print_dash();
		}
	}
}


int solve()
{
	++iterations;
	printf("In solve()\n");
	int rd;
	rd = rand();
	if(rd%10==2 || rd%10==1 || rd%10==0)
	{
		printf("\nInside if : %d\n",rd);
		printf("\nlast digit : %d\n",rd%10);
		return (rd%10);
	}
	
	else
	{
		solve();
	}

}


void before_threshold()
{
	printf("in before_threshold | counter : %d | user : %d | cpu : %d\n\n",counter,user,cpu);
	int row, column, x,y;	
	
	// user's play
	
	if(counter%2 == user)
	{

		printf("User plays for attempt no. %d\n\n",++counter_user);
		printf("before acceptfromUser()\n");
		
		// to check if user gives a valid row and column and within range
		void acceptfromUser()
		{
			do
			{
				// accepts the row no. 
				printf("Enter the row no. : \n"); 
				scanf("%d",&row);
				
				// accepts the column no.
				printf("Enter the column no. : \n");
				scanf("%d",&column);
				
				if(( row > 3 || row < 1 ) || ( column < 1 || column > 3 ))
				{
					printf("\nOUT OF RANGE... Try Again\n\n");
				}
					
			}while(( row > 3 || row < 1 ) || ( column < 1 || column > 3 ));
			column-=1;
			row-=1;	
		}
		acceptfromUser();
		printf("after acceptfromUser()\n");
		printf("row : %d ; column : %d\n", row, column);
		
		
		if(mat[row][column]=='N')
		{	
			mat[row][column] = user_ch;
			printf("%c inserted into desired location of the user\n", user_ch);
			
			pointer_user[0] = row;
			pointer_user[1] = column;		
			
		}  // inserts user_ch into desired location in the matrix
			
		else
		{
			printf("Position already filled, Try another position \n\n");
			acceptfromUser();
			mat[row][column] = user_ch;
			printf("%c inserted into desired location of the user at 2nd attempt\n", user_ch);
		}
		
	} // if user plays
	
	
	// cpu's play
	
	else if(counter%2 == cpu)
	{
		++counter_cpu;
		
		printf("CPU plays for attempt no. %d\n\n",counter_cpu);
			
		// acquiring random position for cpu in matrix 
		// for first attempt
		if(counter_cpu == 1)
		{
			printf("counter_cpu==1 && random fill!\n");
			
			do
			{
				printf("To get random i \n");
				ir = solve();
				printf("To get random j \n");
				jr = solve();	
				printf("ir : %d ; jr : %d\n\n");
				
			}while(mat[ir][jr]!='N');
			
			printf("Initially : @%c@\n",mat[ir][jr]);
			mat[ir][jr] = cpu_ch;
			pointer_cpu[0] = ir;   pointer_cpu[1] = jr;
			printf("After input : @%c@\n",mat[ir][jr]);
		}
		
		
		// following else if condition is for randomly choosing a row or column or diagonal
		// when 1 < counter
		// then randomly choosing a position within that row or column or diagonal 
		// and placing cpu_ch into it
		
		
		else if(counter_cpu > 1) // change#2
		{
			printf("Random selection of row or column or diagonal\n");
			// 1 --> row
			// 2 --> column
			// 3 --> diagonal
			
			int upperbound=0, choose_type;
			int rcd[3] = {0}; // to store the type no. if available
			
			// Following if condition are finding out if the row or column or diagonal are available for cpu_ch 
			// only for selection in random...
			
			if((checkByColumn(pointer_cpu[1], user_ch)==0)) // if user not present in that column
			{
				upperbound++; rcd[1] = 2;
				printf("%c not present in column\n",user_ch);
			}
			
			if(checkByRow(pointer_cpu[0], user_ch)==0) // if user not present in that row
			{
				upperbound++;
				rcd[0] = 1;
				printf("%c not present in row\n",user_ch);
			}
			
			if( (pointer_cpu[0]+pointer_cpu[1])==2 || (pointer_cpu[0] == pointer_cpu[1]) ) // condition for position along a diagonal
			{
				if(checkByDiagonal(pointer_cpu[0], pointer_cpu[1], user_ch)==0)  // if user not present in that diagonal
				{
					upperbound++;
					rcd[2] = 3;
					printf("%c not present in diagonal\n",user_ch);
				}
			}
			
			// condition where random filling is the only way
			if(upperbound == 0)  
			{
				printf("Upperbound is 0\n");
				printf("To check if any empty row or column is available\n\n");
				int k, c1 = 0, pos;
				int c2 = c1;
				
				// for loop to check if there is an empty row or column where cpu_ch could be placed
				
				for(k = 0; k<=2 ; k++)
				{
					if(checkByRow(k,user_ch)==0)
					{
						c1++;  // check counter if user_ch available
						pos = k;	// stores the row no. which is available only for cpu_ch
						break;
					}
					
					if(checkByColumn(k,user_ch)==0)
					{
						c2++;  // check counter if user_ch available
						pos = k;  // stores the column no. which is available only for cpu_ch
						break;
					}
				}
				
				if(c1>0){   // there is one row that is empty or consist of cpu_ch
					printf("An empty row is available\n");
					// fixed row
					x = pos ;
					// (x,y) position should be empty
					do
					{
						y = random(0,2);	 // any random column	
						
					}while(mat[x][y]!='N');
				}
				
				else if(c2>0){ // there is one column that is empty or consist of cpu_ch
					printf("An empty column is available\n");
					// fixed column
					printf("Column no. : %d\n", pos);
					y = pos ; 
					// (x,y) position should be empty
					do
					{
						x = random(0,2);	 // any random row	
						
					}while(mat[x][y]!='N');
					
				}
				
				else if(c1==0 && c2==0)
				{
					printf("Random fill!\n");
					/*do{
						x=random(0,2);
						y=random(0,2);
					}while(mat[x][y]!='N');*/	
					
					char* random_fill()
					{
						char *p;
						for(i = 0 ; i<=2 ; i++){
							for(j = 0; j<=2 ; j++){
								if(mat[i][j]=='N')		
								{
									p=&mat[i][j];   // MA of empty cell extracted
									pointer_cpu[0] = i;  
									pointer_cpu[1] = j;		
									
									return p; 	//returning the position address where cell is empty
								}
							}
						}
					}
					
					char *k = random_fill();
					*k = cpu_ch;  // storing cpu_ch into an empty cell in mat
					printf("storing cpu_ch into an empty cell with random_fill()\n\n");
				}
				
				else{
					printf("Kuch to locha hain!! Line 336\n\n"); exit(1);
				}
				/*printf("Position for %c played by CPU : (%d, %d)\n\n",cpu_ch,x,y);
				mat[x][y] = cpu_ch;
				pointer_cpu[0] = x;
				pointer_cpu[1] = y;*/
			}
			
			// if upperbound > 0
			else 
			{
				printf("Chosen no. of types : %d\n",upperbound);
				y = x = -1;
				do
				{
					choose_type = solve() + 1;   // choosing row or column or diagonal  by random selection
					
				}while(rcd[choose_type-1]==0);

				printf("Chosen type : %d\n",rcd[choose_type-1]);
				
				// Following if condition is for filling cpu_ch in selected row or column or diagonal
				
				// if row is selected
				if( rcd[choose_type-1] == 1 )
				{
					x = pointer_cpu[0];  // fixed row
					// (x,y) cannot be empty
					do
					{
						y = solve(0,2);	 // any random column
						
					}while(mat[x][y]!='N');
					
					//mat[ x ][ y ] = cpu_ch;
					printf("Fixed Row  : %d\nColumn Selected : %d\n\n",x,y);
				}
				
				// if column is selected
				else if(rcd[choose_type-1] == 2) 
				{
					y = pointer_cpu[1];			// fixed column
					
					// y cannot be equals to x
					do{
						x = solve();		    // any random row
						
					}while(mat[x][y]!='N');
					
					//mat[ x ][ y ] = cpu_ch;
					printf("Row selected : %d\nFixed Column : %d\n\n",x,y);
				}
				
				// if diagonal is selected
				else if(rcd[choose_type-1] == 3) 
				{
					
					do // x and y have to be equal or x + y == 2
					{
						x = random(0,2);  y = random(0,2);   // any random row and column
						printf("Row selected : %d\nColumn Selected: %d\n\n",x,y);	
						if(mat[x][y]=='N')
						{
							if( ( x==y ) ||  (x+y)==2 )
								break;
						}
							
					}while( ( x!=y ) ||  (x+y)!=2 );
					
					printf("Final --> Row selected : %d\tColumn Selected: %d\n\n",x,y);
					
				}
				printf("no. of iterations dimension + (x,y) : %d\n\n",iterations);
				printf("Position for %c played by CPU : (%d, %d)\n\n",cpu_ch,x,y);
				mat[x][y] = cpu_ch;
				
				printf("%c\n\n",mat[x][y]);
				
				// last position of cpu stored
				pointer_cpu[0] = x;
				pointer_cpu[1] = y;
				
			} // if upperboud is not 0
			
		}//if counter < 9
				
	}// if cpu plays
}



void check_if_defend()  // to see if any chance user has to win, i.e, any 1 empty cell in a row or column or diagonal of 2 user_ch
{
	
	char *win_pos = 0;
	
	// to check if cpu has a winning position, i.e, an empty cell 
	
	win_pos = find_win_pos(cpu_ch, pointer_cpu[0], pointer_cpu[1]);
	
	if(win_pos!=0 && *pos_cpu=='N')
	{	
		*pos_cpu = cpu_ch;    //  cpu inserted cpu_ch
		printf("winning pos of cpu filled with %c\n",*pos_cpu);
		pos_cpu = 0 ;
		pointer_cpu[0] = win_pos_row;
		pointer_cpu[1] = win_pos_column;
		check_if_win();
		defense_visited = 1;
		return;
	}
	
	
	// to check if user has a winning position, i.e, an empty cell
	
	win_pos = find_win_pos(user_ch, pointer_user[0], pointer_user[1]);
	
	if(win_pos!=0 && *pos_user=='N')
	{
		*pos_user = cpu_ch;    //  cpu inserted cpu_ch
		printf("winning pos of user filled with %c\n",*pos_cpu);
		pos_user = 0;
		pointer_cpu[0] = win_pos_row;
		pointer_cpu[1] = win_pos_column;
		win_pos_row = -1;
		win_pos_column = -1;
		defense_visited = 1;
		return;
	}
	
	defense_visited = 0;
	printf("No winning position of cpu or user spotted\n\n");
	return;
	
}


void check_if_win()
{
	// checks if user wins
	
		printf("checks if user wins\n\n");
		if( (checkByColumn(pointer_user[1], user_ch) == 3 ) || (checkByRow(pointer_user[0], user_ch) == 3 ) || (checkByDiagonal(pointer_user[0], pointer_user[1], user_ch) == 3 ))
		{
			printf("You Won!!\n\n");
			exit(1);
		}
	
	
	// checks if cpu wins
	
	
		printf("checks if cpu wins\n\n");
		if( (checkByColumn(pointer_cpu[1], cpu_ch) == 3 ) || (checkByRow(pointer_cpu[0], cpu_ch) == 3 ) || (checkByDiagonal(pointer_cpu[0], pointer_cpu[1], cpu_ch) == 3 ) )
		{
			printf("You Lost!!\n\n");
			exit(1);
		}
	
}


void after_threshold()
{
	printf("In after_threshold\n");
	check_if_win(); //checks if user or cpu has won
	// if either of them has won, then control exits the program
	
	// if no then cpu checks if user has a winning chance
	// 		-->	if user does, cpu fills that place with cpu_ch with the following function
	
	if ( counter%2==cpu ) // cpu's play
	{
		printf("to check if cpu has to defend\n");
		check_if_defend();
	}
}


void game()
{
	defense_visited=0;
	printf("In game()\n");
	/*
	if( counter == 10 ) 
	{
		if(pos_user == 0 && pos_cpu == 0)
			printf("\n\nMatch Draw\n\n");
			
		else
		{
			if(pos_user == 0 && pos_cpu !=0 )
				printf("\n\nYou Lost!!!\n\n");
				
			else if(pos_user == 0 && pos_cpu !=0 )
				printf("\n\nYou Won!!!\n\n");
			
			else
				printf("There is some problem under if cond : counter == 9\n\n");
			
		}
		exit(1);		
	}*/
	
	++counter; // counting of Total no. of attempts made by both players
	
	if ( counter == 10 )  // checking every iteration if working   // change#5
	{
		printf("Match Draw!!\n\n");
		exit(1);
	}	
	
	printf("Counter no. %d\n\n",counter);
	
	//if( (user==1 && counter>=3) || (cpu==1 && counter>=4) )
	if(counter>=3)
	{
		after_threshold();  // first checks if cpu or user has won 
	}
	
	//if (*pos_user)!=cpu_ch && it is cpu's chance, then cpu has not placed anything, so will return back to random or strategic filling method
	// or if it is user's play 
	
	if(defense_visited==0)
	{
		if(counter%2==cpu)
			printf("Neither won nor there was anything to defend\n");
		before_threshold();
	}
	
	
	display();
	
	game();
	
}


void assignXorO() // assigns 'X' or 'O' to user and cpu or vice versa
{
	printf("\nin assignXorO()\n");
	
	int choose_char = (random(1,10))%2;    // to get random number from which to determine whether 'X' or 'O'
	
	// random() will return 1 or 0   |   1 --> 'X'  and 0 --> 'O'
	
	if(choose_char == 1)    // cpu gets 'X'
	{
		cpu_ch = 'X';
		user_ch = 'O';
		printf("CPU takes %c\n\nUser takes %c\n", cpu_ch, user_ch);
	}
	
	else  // cpu gets 'O'
	{
		cpu_ch = 'O';
		user_ch = 'X';
		printf("CPU takes %c\n\nUser takes %c\n", cpu_ch, user_ch);
	}
	
}


int main()
{
	fill();
	int ch, odd, even;
	do
	{
		printf("\t\tWould You like to start the game? --> Y or N\n\n\t\t\t\t");
		ch = getch();
		printf("\n\t\t\t");
		if(ch == 'Y' || ch == 'y')
		{
			printf("User starts the game\n");
			
			assignXorO();
			display();
			user = 1;
			cpu = 0;
			game();  // 1 starts the game, 0 starts second
		}
			
			
		else if(ch=='N' || ch=='n')
		{
			printf("CPU starts the game\n");
						
			assignXorO();
			printf("CPU : %c  |  USER : %c", cpu_ch, user_ch);
			
			// obtain a random position (i,j) in matrix for CPU
			ir = solve();
			jr = solve();
			display();
			cpu = 1;
			user = 0;
			// the function where the main tic tao toe game will be run
			game();
			// 1 starts the game, 0 starts second
		}
			
		else
			error_message();
		
	}while(ch!='Y' && ch!='y' && ch!='N' && ch!='n');
	
	//acceptfromUser();
	
	
}






// following functions perform two tasks and check two conditions :

// --> first counts the no. of 'X or 'O' in that R/C/D which is asked for and passed as a parameter
// --> also counts the no. of empty cells, i.e, 'N' in that same R/C/D

// then it checks if no. of 'X' is 2 and empty cell is 1 in a R/C/D
// then it checks if no. of 'O' is 2 and empty cell is 1 in a R/C/D

// if either of two condition is satisfied then the MA of that empty cell, which a winning position for user/cpu,
// is stored in pos_cpu/pos_user




int checkByColumn(int c, char ch)  // processing though a column
{
	int count1 = 0;
	printf("in checkByColumn, c : %d\n",c);
	int count2 = 0;
	char *store = 0;
	
	for(i = 0; i<3; i++)
	{
		printf("Checking %c with %c\n",mat[i][c],ch);
		
		// this condition counts no. of ch's persent in row
		if( mat[i][c] == ch )  
			count1++;
		
		// this condition counts no. of empty cell persent in row
		if( mat[i][c]=='N')
		{
			count2++;
			// the moment I get an empty cell, I store the MA of that empty cell
			win_pos_row = i;
			win_pos_column = c;
			store = &mat[i][c];
		}
	}
	
	if(count1==2 && count2==1 && store!=0) // if a row has 1 empty cell and two similar filled ch in 
	{
		if(cpu_ch==ch) // if we are looking for winning position of cpu in a R/C/D
		{
			pos_cpu=store;
		}
		
		else if(user_ch==ch)  // if we are looking for winning position of user in a R/C/D
		{
			pos_user=store;			
		}
	}
	
	printf("No. of %c in column : %d\n\n",ch,count1);
	return count1;
	
}

int checkByRow(int r, char ch)  // processing a row
{
	int count1 = 0;
	int count2 = 0;
	char *store = 0;
	printf("in checkByRow, r : %d\n",r);
	for(i = 0; i<3; i++)
	{
		printf("Checking %c with %c\n",mat[r][i],ch);
		if( mat[r][i]==ch )
			count1++;
			
		if( mat[r][i]=='N')
		{
			count2++;
			// the moment I get an empty cell, I store the MA of that empty cell
			win_pos_row = r;
			win_pos_column = i;
			store = &mat[r][i];
		}
	}
	
	if(count1==2 && count2==1 && store!=0) // if a row has 1 empty cell and two similar filled ch in 
	{
		if(cpu_ch==ch) // if we are looking for winning position of cpu in a R/C/D
		{
			pos_cpu=store;
		}
		
		else if(user_ch==ch)  // if we are looking for winning position of cpu in a R/C/D
		{
			pos_user=store;			
		}
	}
	
	printf("No. of %c in column : %d\n\n",ch,count1);
	return count1;
	
}



int checkByDiagonal(int r, int c, char ch)
{
	int count1 = 0;
	int count2 = 0;
	char *store = 0;
	printf("in checkByDiagonal r: %d ; c : %d\n",r,c);
	if(r==c)
	{
		for(i=0;i<3;i++)
		{
			printf("Checking %c with %c\n",mat[i][i],ch);
			if(mat[i][i] == ch )
				count1++;
				
			if( mat[i][i]=='N')
			{
				count2++;
				// the moment I get an empty cell, I store the MA of that empty cell
				win_pos_row = i;
				win_pos_column = i;
				store = &mat[i][i];
			}
		}
	}
	
	else if( (r!=c) && (r+c)==2 )
	{
		j=2;  // j for column ; i for row
		
		for(i=0;i<3;i++)
		{
			printf("Checking %c with %c\n",mat[i][j],ch);
			if(mat[i][j]==ch)
				count1++;
				
			if( mat[i][j]=='N')
			{
				count2++;
				// the moment I get an empty cell, I store the MA of that empty cell
				win_pos_row = i;
				win_pos_column = j;
				store = &mat[i][j];
			}	
			
			j--;
		}
	}
	
	
	if(count1==2 && count2==1 && store!=0) // if a row has 1 empty cell and two similar filled ch in 
	{
		if(cpu_ch==ch) // if we are looking for winning position of cpu in a R/C/D
		{
			pos_cpu=store;
		}
		
		else if(user_ch==ch)  // if we are looking for winning position of cpu in a R/C/D
		{
			pos_user=store;			
		}
	}
	
	printf("No. of %c in diagonal : %d\n\n",ch,count1);
	return count1;
	
}
